import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dragger_survey/src/services/services.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:dragger_survey/src/blocs/blocs.dart';
import 'package:dragger_survey/src/widgets/select_granularity.dart';

class SurveySetForm extends StatefulWidget {
  @override
  _SurveySetFormState createState() => _SurveySetFormState();
}

class _SurveySetFormState extends State<SurveySetForm> {
  final _formKey = GlobalKey<FormState>();
  bool _formHasChanged = false;

  // autogenerated
  String _id;

  // required
  String _created = DateTime.now().toUtc().toIso8601String();
  String _name;
  int _resolution;
  String _xName;
  String _yName;

  // Optional
  String _description = "";
  String _xDescription = "";
  String _yDescription = "";
  dynamic _prismSurveys = [];

  // When edited
  DateTime _edited;

  @override
  Widget build(BuildContext context) {
    final PrismSurveySetBloc prismSurveySetBloc =
        Provider.of<PrismSurveySetBloc>(context);

    return Form(
      key: _formKey,
      onChanged: () {
        if (_formKey.currentState.validate()) {
          setState(() {
            _formHasChanged = true;
          });
        }
      },
      child: buildForm(bloc: prismSurveySetBloc),
    );
  }

  Widget buildForm({@required bloc}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        buildTextFormField(
          attribute: _name,
          labelText: "Survey Name",
          hintText: "Please provide a meaningful name",
          validatorFunction: (value) {
            if (value.isEmpty) {
              return 'Please enter a name';
            }
            return null;
          },
        ),
        buildTextFormField(
          attribute: _description,
          labelText: "Survey set description",
          hintText: "The description of the prism survey",
          validatorFunction: (value) {},
        ),
        SelectGranularity(),
        buildTextFormField(
          attribute: _xName,
          labelText: "Label for x-axis",
          hintText: "Should be easy to understand.",
          validatorFunction: (value) {
            if (value.isEmpty) {
              return 'Please enter an x-axis name';
            }
            return null;
          },
        ),
        buildTextFormField(
          attribute: _xDescription,
          labelText: "X-axis desciption",
          hintText: "What does the x-axis stand for?",
          validatorFunction: (value) {},
        ),
        buildTextFormField(
          attribute: _yName,
          labelText: "Label for y-axis",
          hintText: "Should be easy to understand.",
          validatorFunction: (value) {
            if (value.isEmpty) {
              return 'Please enter an y-axis name';
            }
            return null;
          },
        ),
        buildTextFormField(
          attribute: _yDescription,
          labelText: "Y-axis desciption",
          hintText: "What does the y-axis stand for?",
          validatorFunction: (value) {},
        ),
        buildSubmitButton(bloc: bloc),
      ],
    );
  }

  Widget buildSubmitButton({@required bloc}) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: SizedBox(
        width: double.infinity,
        child: RaisedButton(
          disabledColor: Colors.orange.shade50,
          shape:
              RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
          color: Colors.orange,
          textColor: Colors.white,
          onPressed: _formHasChanged
              ? () {
                  _buttonOnPressed(formKey: _formKey, bloc: bloc);
                  Navigator.pop(context);
                }
              : null,
          child: Text('Submit'),
        ),
      ),
    );
  }

  TextFormField buildTextFormField({
    @required attribute,
    @required String labelText,
    String hintText,
    validatorFunction
  }) {
    return TextFormField(
      textInputAction: TextInputAction.next,
      keyboardType: TextInputType.text,
      decoration: InputDecoration(
        labelText: labelText,
        hintText: hintText ?? '',
      ),
      initialValue: attribute,
      validator: validatorFunction,
      onSaved: (value) {
        setState(() {
          attribute = value;
        });
      },
    );
  }

  void _sendFormValuesToBloc({@required bloc}) {
      PrismSurveySet surveySet = PrismSurveySet(
        created: _created,
        name: _name,
        description: _description,
        resolution: _resolution,
        xName: _xName,
        xDescription: _xDescription,
        yName: _yName,
        yDescription: _yDescription,
      );

      bloc.addPrismSurveySetToDb(surveySet: surveySet);
      print("2) ----> Form values have been sent to bloc");
    }
    
  void _buttonOnPressed({formKey, @required bloc}) {
      if (formKey.currentState.validate()) {
        print("1a) ----> Form has been validated.");
        formKey.currentState.save();

        _sendFormValuesToBloc(bloc: bloc);
        print("1b) ----> Sending form values to bloc.");

        print("1c) ----> Sent data:");
        print("_created: $_created");
        print("_name: $_name");
        print("_description: $_description");
        print("_resolution: $_resolution");
        print("_xName: $_xName");
        print("_yName: $_yName");
        print("_xDescription: $_xDescription");
        print("_xDescription: $_xDescription");
        print("_yDescription: $_yDescription");
      }
    }
  
}
