import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:dragger_survey/src/services/services.dart';
import 'package:dragger_survey/src/styles.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:dragger_survey/src/blocs/blocs.dart';
import 'package:dragger_survey/src/widgets/select_granularity.dart';

class SurveySetForm extends StatefulWidget {
  @override
  _SurveySetFormState createState() => _SurveySetFormState();
}

class _SurveySetFormState extends State<SurveySetForm> {
  final _formKey = GlobalKey<FormState>();
  bool _formHasChanged = false;

  // autogenerated
  String _id;

  // required
  DateTime _created = DateTime.now().toUtc();
  String _name;
  int _resolution;
  String _xName;
  String _yName;

  // Optional
  String _description = "";
  String _xDescription = "";
  String _yDescription = "";
  dynamic _prismSurveys = [];

  // When edited
  DateTime _edited;

  // Meta information
  String _createdByUser;
  String _lastEditedByUser;
  String _team;

  @override
  Widget build(BuildContext context) {
    final PrismSurveySetBloc prismSurveySetBloc =
        Provider.of<PrismSurveySetBloc>(context);

    return Form(
      key: _formKey,
      onChanged: () {
        if (_formKey.currentState.validate()) {
          setState(() {
            _formHasChanged = true;
          });
        }
      },
      child: _buildForm(
          bloc: prismSurveySetBloc, context: context, formKey: _formKey),
    );
  }

  Widget _buildForm({@required bloc, @required context, @required formKey}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: <Widget>[
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "Survey Name",
            hintText: "Please provide a meaningful name",
          ),
          // initialValue: attribute,
          validator: (value) {
            if (value.isEmpty) {
              return 'Please enter a name';
            }
            return null;
          },
          onSaved: (value) => _name = value,
        ),
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "Survey set description",
            hintText: "The description of the prism survey",
          ),
          // initialValue: attribute,
          onSaved: (value) => _description = value,
        ),
        SelectGranularity(),
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "Label for x-axis",
            hintText: "Should be easy to understand",
          ),
          // initialValue: attribute,
          validator: (value) {
            if (value.isEmpty) {
              return 'Please enter a label';
            }
            return null;
          },
          onSaved: (value) => _xName = value,
        ),
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "X-axis desciption",
            hintText: "What does the x-axis stand for",
          ),
          // initialValue: attribute,
          onSaved: (value) => _xDescription = value,
        ),
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "Label for y-axis",
            hintText: "Should be easy to understand",
          ),
          // initialValue: attribute,
          validator: (value) {
            if (value.isEmpty) {
              return 'Please enter a label';
            }
            return null;
          },
          onSaved: (value) => _yName = value,
        ),
        TextFormField(
          textInputAction: TextInputAction.next,
          keyboardType: TextInputType.text,
          decoration: InputDecoration(
            labelText: "Y-axis desciption",
            hintText: "What does the y-axis stand for",
          ),
          // initialValue: attribute,
          onSaved: (value) => _yDescription = value,
        ),

        
        _buildFormButton(
          bloc: bloc,
          context: context,
          formKey: formKey,
        ),
      ],
    );
  }

  Widget _buildFormButton(
      {@required bloc, @required context, @required formKey}) {
    
    final SignInBloc signInBloc =
        Provider.of<SignInBloc>(context);

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8.0),
      child: Column(
        children: <Widget>[
          _buildSubmitButton(formKey, bloc, signInBloc, context),
          _buildCancelButton(context)
        ],
      ),
    );
  }

  SizedBox _buildSubmitButton(formKey, bloc, SignInBloc signInBloc, context) {
    return SizedBox(
          width: double.infinity,
          child: FlatButton(
            disabledColor: Colors.orange.shade50.withOpacity(0.4),
            shape:
                RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
            color: Colors.orange,
            textColor: Colors.white,
            onPressed: _formHasChanged
                ? () {
                    _buttonOnPressed(formKey: formKey, surveySetBloc: bloc, signInBloc: signInBloc);
                    print("Submit button presssed");
                    Navigator.of(context).pop();
                  }
                : null,
            child: Text('Submit'),
          ),
        );
  }
  SizedBox _buildCancelButton(context) {
    return SizedBox(
          width: double.infinity,
          child: FlatButton(
            textColor: Styles.colorPrimary,
            onPressed: () {
                    print("Cacel button presssed");
                    Navigator.of(context).pop();
                  },
            child: Text('Cancel'),
          ),
        );
  }

  void _sendFormValuesToBloc({@required PrismSurveySetBloc surveySetBloc, @required SignInBloc signInBloc}) {
    Map<String, dynamic> surveySet = {
      "created": _created,
      "name": _name,
      "description": _description,
      "resolution": _resolution,
      "xName": _xName,
      "xDescription": _xDescription,
      "yName": _yName,
      "yDescription": _yDescription,
      "createdByUser": _createdByUser,
      "lastEditedByUser": _lastEditedByUser,
    };
    print("===============================");
    print("Values sent to bloc:");
    print("_created: $_created");
    print("_name: $_name");
    print("_description: $_description");
    print("_resolution: $_resolution");
    print("_xName: $_xName");
    print("_xDescription: $_xDescription");
    print("_yName: $_yName");
    print("_yDescription: $_yDescription");
    print("_createdByUser: $_createdByUser");
    print("_lastEditedByUser: $_lastEditedByUser");
    print("================================");

    surveySetBloc.addPrismSurveySetToDb(surveySet: surveySet);
    print("2) ----> Form values have been sent to bloc");
  }

  void _buttonOnPressed({formKey, @required surveySetBloc, @required SignInBloc signInBloc}) {
    if (formKey.currentState.validate()) {
      print("1a) ----> Form has been validated.");
      _createdByUser = signInBloc.signedInUser.uid;
      formKey.currentState.save();

      _sendFormValuesToBloc(surveySetBloc: surveySetBloc, signInBloc: signInBloc);
      print("1b) ----> Sending form values to bloc.");

      print("1c) ----> Sent data:");
      print("_created: $_created");
      print("_name: $_name");
      print("_description: $_description");
      print("_resolution: $_resolution");
      print("_xName: $_xName");
      print("_yName: $_yName");
      print("_xDescription: $_xDescription");
      print("_xDescription: $_xDescription");
      print("_yDescription: $_yDescription");
      print("_createdByUser: $_createdByUser");
    }
  }
}
